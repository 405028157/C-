源程序如下，main函数做了适当的简化，只保留了出现问题的部分。main函数调用
Is_Perfect_Number，进入函数中，第40行定义int i = 2；接下来就出现了意料
之外的情况，用VS2017单步调试中，发现第43行调用isprime之后，i的值成为了未
定义的（-858993460），导致了第48行while循环以及之后的程序发生错误。

起初Orange推测是isprime和Is_Perfect_Number中同时定义了i变量导致的错误，但当Is_Perfect_Number
中的i变量更改名字后发现仍然有相同的错误出现。（尽管Orange并不认为是变量名字相同导致的错误）。等Orange
发现问题之后再来更新

经过材料化学专业的@Fw指点，发现了问题<(*￣▽￣*)/
52 - 64 行的else的结构块里新定义了i，将Is_Perfect_Number函数中的变量i隐藏了，而且因为i在结构块中定义，
为自动变量，所以不能在定义时初始化，所以i值一定是未定义的。

之后又发现了一处错误，在找一个整数的全部因子时（56 - 58 行），将temp值设为了sqrt(num)，导致在找6的因子
时漏了3。尽管将temp值设为sqrt(num)是判断素数的常用方法，但在求因子时却不适用。将temp值设为2/num就能得
到正确的结果（当temp>2/num时 1 < num/temp < 2）
#include<stdio.h>
#include<math.h>
int isprime(int);
int Is_Perfect_Number(int);
int main()
{
	int bol;
	
    bol = Is_Perfect_Number(4);
	return 0;
}

int isprime(int num)
{
	int i, j;
	
	i = 2;
	j = sqrt(num);
	while (i <= j) {
		if (num % i == 0)
			break;
		i++;
	}

	if (i > j)
		return 1;
	else
		return 0;

}

int Is_Perfect_Number(int num)
{
	int factor[100], i, index, temp;

	temp = sqrt(num);
	i = 2;
	index = 0;
	if (isprime(num))
		return 0;
	else{
		while (i <= temp)
			if (num % i == 0)
				factor[index++] = i++;
		int i, sum;
		sum = 0;
		for (i = 0; i < index; i++)
			sum += factor[i];
		sum += 1;
		if (sum == num)
			return 1;
		else
			return 0;
	}
}

经过调试后程序运行正确，代码如下（附上题目）

题目内容：
一个正整数的因子是所有可以整除它的正整数。而一个数如果恰好等于除它本身外的因子之和，这个数就称为完数。例如6=1＋2＋3(6的因子是1,2,3)。

现在，你要写一个程序，读入两个正整数n和m（1<=n<m<1000），输出[n,m]范围内所有的完数。

提示：可以写一个函数来判断某个数是否是完数。

输入格式:
两个正整数，以空格分隔。

输出格式：
其间所有的完数，以空格分隔，最后一个数字后面没有空格。如果没有，则输出一行文字：
NIL
（输出NIL三个大写字母加回车）。

输入样例：
1 10

输出样例：
6
时间限制：500ms内存限制：32000kb

#include<stdio.h>
#include<math.h>
int isprime(int);
int Is_Perfect_Number(int);
int main()
{
	int n, m, apple, cnt;
	
	cnt = 0;
	printf("Please input n and m\n");
	scanf("%d%d", &n, &m);
	for (apple = n; apple <= m; apple++) {
		if (Is_Perfect_Number(apple)) {
			printf("%d ", apple);
			cnt++;
		}
	}
	if (cnt == 0)
		printf("NIL\n");
	else
		putchar('\b');
	return 0;
}

int isprime(int num)
{
	int i, j;

	i = 2;
	j = sqrt(num);
	while (i <= j) {
		if (num % i == 0)
			break;
		i++;
	}

	if (i > j)
		return 1;
	else
		return 0;

}

int Is_Perfect_Number(int num)
{
	int factor[100], ii, index, temp;

	temp = num/2;
	ii = 2;
	index = 0;
	if (isprime(num))
		return 0;
	else{
		while (ii <= temp)
			if (num % ii == 0)
				factor[index++] = ii++;
		{int ii = 1, sum;
		sum = 0;
		for (ii = 0; ii < index; ii++)
			sum += factor[ii];
		sum += 1;
		if (sum == num)
			return 1;
		else
			return 0; }
	}
}
